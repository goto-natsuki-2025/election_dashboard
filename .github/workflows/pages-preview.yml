name: pr-preview

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

permissions:
  contents: write
  pull-requests: write

jobs:
  deploy-preview:
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip pandas pyarrow

      - name: Generate static data
        run: python regenerate_static_data.py

      - name: Prepare preview artifacts
        run: |
          set -eu
          rm -rf public
          mkdir -p public
          rsync -av \
            --exclude '.git' \
            --exclude '.github' \
            --exclude '.codex' \
            --exclude 'public' \
            ./ public/
          touch public/.nojekyll

      - name: Deploy PR preview
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: public
          destination_dir: pr-preview/pr-${{ github.event.number }}
          keep_files: true
          commit_message: "docs: deploy preview for PR #${{ github.event.number }}"

      - name: Compute preview URL
        id: preview
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: |
          set -eu
          OWNER="${GITHUB_REPOSITORY%%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          URL="https://${OWNER}.github.io/${REPO}/pr-preview/pr-${PR_NUMBER}/"
          echo "url=${URL}" >> "$GITHUB_OUTPUT"

      - name: Publish preview URL comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const marker = '<!-- pr-preview -->';
            const issueNumber = context.issue.number;
            const previewUrl = '${{ steps.preview.outputs.url }}';
            const body = `${marker}
プレビュー URL: ${previewUrl}
最終更新: ${new Date().toISOString()}`;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              per_page: 100,
            });
            const existing = comments.find(comment =>
              comment.user?.type === 'Bot' && comment.body?.includes(marker)
            );
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body,
              });
            }